PROGRAM ::= require ifj21 STMT_LIST
STMT_LIST ::= STMT STMT_LIST
STMT_LIST ::= $
STMT ::= expr
STMT ::= function id ( FUNPARAM_DEF_LIST FUNRETOPT FUN_BODY
STMT ::= global id : function ( DATATYPE_LIST FUNRETOPT
FUNRETOPT ::= ''
FUNRETOPT ::= , DATATYPE OTHER_FUNRETURNS
OTHER_FUNRETURNS ::= ''
OTHER_FUNRETURNS ::= , DATATYPE OTHER_DATATYPES
DATATYPE_LIST ::= DATATYPE OTHER_DATATYPES
DATATYPE_LIST ::= )
OTHER_DATATYPES ::= ) 
OTHER_DATATYPES ::= , DATATYPE OTHER_DATATYPES
FUNPARAM_DEF_LIST ::= )
FUNPARAM_DEF_LIST ::= , id : DATATYPE OTHER_FUNPARAMS
OTHER_FUNPARAMS ::= )
OTHER_FUNPARAMS ::= , id : DATATYPE OTHER_FUNPARAMS
FUN_BODY ::= FUN_STMT FUN_BODY
FUN_BODY ::= end
FUN_STMT ::= if COND_STMT
FUN_STMT ::= for id = expr , expr FOR_ASSIGNMENT  FUN_BODY
FUN_STMT ::= repeat REPEAT_BODY
FUN_STMT ::= while expr do FUN_BODY
FUN_STMT ::= local id : DATATYPE ASSIGNMENT
FUN_STMT ::= return RETURN_EXPR_LIST
FOR_ASSIGNMENT ::= do
FOR_ASSIGNMENT ::= , expr do
RETURN_EXPR_LIST ::= expr OTHER_RETURN_EXPR
OTHER_RETURN_EXPR ::= , expr OTHER_RETURN_EXPR
OTHER_RETURN_EXPR ::= "
ASSIGNMENT ::= ''
ASSIGNMENT ::= = expr
REPEAT_BODY ::= until
REPEAT_BODY ::= FUN_STMT REPEAT_BODY
DATATYPE ::= string
DATATYPE ::= integer
DATATYPE ::= boolean
DATATYPE ::= number
COND_STMT ::= expr then COND_BODY
COND_BODY ::= end
COND_BODY ::= elseif COND_STMT
COND_BODY ::= FUN_STMT COND_BODY
COND_BODY ::= else FUN_BODY 
